/* 
 * Description: Image processing application
 * Author: Mehrab Firouzi Moghadam
 * Date: 26/03/2021  
 */

package com.qmul.frame;


import com.qmul.filters.RotatationFilter;
import com.qmul.commandFramework.CommandStack;
import com.qmul.filters.BitPlaneFilter;
import com.qmul.filters.EdgeDetectionFilter;
import com.qmul.filters.DisplayImage;
import com.qmul.filters.HistogramEqualiserFilter;
import com.qmul.filters.BrightnessFilter;
import com.qmul.filters.OrderStatisticsFilter;
import com.qmul.filters.PixelShiftingFilter;
import com.qmul.filters.SmoothingFilter;
import com.qmul.filters.ThresholdingFilter;
import com.qmul.model.PathPanel;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;

public class ImageEditorFrame extends JFrame {
    private BufferedImage bi;   // the input image saved as bi;//
    private CommandStack stack = new CommandStack();
    private PathPanel pathPanel = new PathPanel();
    private ImagePanel imagePanel = new ImagePanel(pathPanel);
    /**
     * Creates new form frmMain
     */
    public ImageEditorFrame() {
        initComponents();
        getContentPane().add(imagePanel, BorderLayout.CENTER);
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
       //pathPanel.addObserver(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        dbOpen = new javax.swing.JFileChooser();
        tlbMain = new javax.swing.JToolBar();
        tlbMainLower = new javax.swing.JToolBar();
        btnOpen = new javax.swing.JButton();
        btnAddFile = new javax.swing.JButton();
        tlbSep4 = new javax.swing.JToolBar.Separator();
        btnSave = new javax.swing.JButton();
        btnSaveAs = new javax.swing.JButton();
        tlbSep1 = new javax.swing.JToolBar.Separator();
        btnUndo = new javax.swing.JButton();
        btnRedo = new javax.swing.JButton();
        tlbSep2 = new javax.swing.JToolBar.Separator();
        btnCut = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        tlbSep3 = new javax.swing.JToolBar.Separator();
        btnRotateAnticlock = new javax.swing.JButton();     
        btnRotateClock = new javax.swing.JButton();     
        txtRotateVal = new javax.swing.JTextField("90", 15);
        tlbSep5 = new javax.swing.JToolBar.Separator(); 
        btnEdgeDetection = new javax.swing.JButton(); 
        tlbSep6 = new javax.swing.JToolBar.Separator(); 
        btnSmoothing = new javax.swing.JButton(); 
        tlbSep7 = new javax.swing.JToolBar.Separator(); 
        btnHistEqualisation = new javax.swing.JButton();
        tlbSep8 = new javax.swing.JToolBar.Separator(); 
        btnThresholding = new javax.swing.JButton();
        txtThresholding = new javax.swing.JTextField("150", 15);
        chkGrayScale = new javax.swing.JCheckBox("Gray-Scale");
        tlbSep9 = new javax.swing.JToolBar.Separator(); 
        btnBrightness = new javax.swing.JButton();
        txtBrightness = new javax.swing.JTextField("2.0", 15);        
        btnBitPlane = new javax.swing.JButton();
        tlbSep10 = new javax.swing.JToolBar.Separator(); 
        btnPixelShifting = new javax.swing.JButton();
        txtPixelShifting = new javax.swing.JTextField("1", 15);
        txtPixelScaleFactor = new javax.swing.JTextField("2.0", 15);
        tlbSep11 = new javax.swing.JToolBar.Separator();
        btnOrderStatistics = new javax.swing.JButton();
        tlbSep12 = new javax.swing.JToolBar.Separator();
        lblImage = new javax.swing.JLabel();
        mnuMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuOpen = new javax.swing.JMenuItem();
        mnuSep1 = new javax.swing.JPopupMenu.Separator();
        mnuSave = new javax.swing.JMenuItem();
        mnuSaveAs = new javax.swing.JMenuItem();
        mnuSep2 = new javax.swing.JPopupMenu.Separator();
        mnuExit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mnuUndo = new javax.swing.JMenuItem();
        mnuRedo = new javax.swing.JMenuItem();
        mnuSep3 = new javax.swing.JPopupMenu.Separator();
        mnuCut = new javax.swing.JMenuItem();
        mnuCopy = new javax.swing.JMenuItem();
        mnuFilters = new javax.swing.JMenu();
        mnuRotateClockwise = new javax.swing.JMenuItem();
        mnuRotateAntiClockwise = new javax.swing.JMenuItem();
        mnuSep4 = new javax.swing.JPopupMenu.Separator();
        mnuSep5 = new javax.swing.JPopupMenu.Separator();        
        mnuHelp = new javax.swing.JMenu();
        mnuAbout = new javax.swing.JMenuItem();
        //panel = new JPanel(new FlowLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Editor @2021");
        setName("frmMain"); // NOI18N

        tlbMain.setRollover(true);
        tlbMainLower.setRollover(true);

        ImageIcon icnOpen = new ImageIcon(new ImageIcon(getClass().getResource("/tlbIcons/addFile.png")).getImage().getScaledInstance(35, 35, Image.SCALE_SMOOTH));
        btnOpen.setIcon(icnOpen);
        btnOpen.setFocusable(false);
        btnOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnOpenMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        tlbMain.add(btnOpen);
//        btnAddFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tlbIcons/folder.png"))); // NOI18N
//        btnAddFile.setFocusable(false);
//        btnAddFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
//        btnAddFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
//        btnAddFile.addMouseListener(new java.awt.event.MouseAdapter() {
//            public void mouseClicked(java.awt.event.MouseEvent evt) {
//                try {
//                    btnAddFileMouseClicked(evt);
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }
//            }
//        });
//        tlbMain.add(btnAddFile);
        tlbMain.add(tlbSep4);

//        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tlbIcons/save.png"))); // NOI18N
//        btnSave.setFocusable(false);
//        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
//        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
//        tlbMain.add(btnSave);
//
//        btnSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tlbIcons/saveas.png"))); // NOI18N
//        btnSaveAs.setFocusable(false);
//        btnSaveAs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
//        btnSaveAs.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
//        tlbMain.add(btnSaveAs);
//        tlbMain.add(tlbSep1);

        ImageIcon icnUndo = new ImageIcon(new ImageIcon(getClass().getResource("/tlbIcons/undo.png")).getImage().getScaledInstance(35, 35, Image.SCALE_SMOOTH));
        btnUndo.setIcon(icnUndo);         
        btnUndo.setFocusable(false);
        btnUndo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUndo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnUndo.setToolTipText("Undo");        
        btnUndo.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnUndoMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        tlbMain.add(btnUndo);
       
        ImageIcon icnRedo = new ImageIcon(new ImageIcon(getClass().getResource("/tlbIcons/redo.png")).getImage().getScaledInstance(35, 35, Image.SCALE_SMOOTH));
        btnRedo.setIcon(icnRedo);        
        btnRedo.setFocusable(false);
        btnRedo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRedo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRedo.setToolTipText("Redo");
        btnRedo.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnRedoMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        tlbMain.add(btnRedo);
        tlbMain.add(tlbSep2);

//        btnCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tlbIcons/edit_cut.png"))); // NOI18N
//        btnCut.setFocusable(false);
//        btnCut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
//        btnCut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
//        tlbMain.add(btnCut);
//
//        btnCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tlbIcons/copy.png"))); // NOI18N
//        btnCopy.setFocusable(false);
//        btnCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
//        btnCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
//        tlbMain.add(btnCopy);
//        tlbMain.add(tlbSep3);

        ImageIcon icnRotateAnticlock = new ImageIcon(new ImageIcon(getClass().getResource("/tlbIcons/rotate_anticlockwise.png")).getImage().getScaledInstance(35, 35, Image.SCALE_DEFAULT));
        btnRotateAnticlock.setIcon(icnRotateAnticlock);  
        btnRotateAnticlock.setFocusable(false);
        btnRotateAnticlock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRotateAnticlock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRotateAnticlock.setToolTipText("Rotation Anti-clockwise");
        btnRotateAnticlock.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnRotateAntiClockwiseMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });      
        tlbMain.add(btnRotateAnticlock);         
        ImageIcon icnRotateClock = new ImageIcon(new ImageIcon(getClass().getResource("/tlbIcons/rotate_clockwise.png")).getImage().getScaledInstance(35, 35, Image.SCALE_DEFAULT));
        btnRotateClock.setIcon(icnRotateClock);         
        btnRotateClock.setFocusable(false);
        btnRotateClock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRotateClock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRotateClock.setToolTipText("Rotation Clockwise"); 
        btnRotateClock.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnRotateClockwiseMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });      
        tlbMain.add(btnRotateClock);   
        txtRotateVal.setPreferredSize(new Dimension(50,44));
        txtRotateVal.setMaximumSize(new Dimension(50,45));        

        txtRotateVal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tlbMain.add(txtRotateVal);  
        tlbMain.add(tlbSep5);
        ImageIcon icnEdge = new ImageIcon(new ImageIcon(getClass().getResource("/tlbIcons/edge.png")).getImage().getScaledInstance(35, 35, Image.SCALE_SMOOTH));
        btnEdgeDetection.setIcon(icnEdge);         
        btnEdgeDetection.setFocusable(false);
        btnEdgeDetection.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEdgeDetection.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEdgeDetection.setToolTipText("Edge Detection");
        btnEdgeDetection.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnEdgeDetectionMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });     
         
        tlbMain.add(btnEdgeDetection); 
        //String[] edgeDetectionKernelsList = {"Horizontal", "Vertical", "Sobel Horizontal", "Sobel Vertical", "Scharr Horizontal", "Scharr Vertical"};
        String[] edgeDetectionKernelsList = {Reference.ED_H, Reference.ED_V, Reference.ED_SOBEL_V, Reference.ED_SOBEL_H, Reference.ED_SCHARR_V, Reference.ED_SCHARR_H};
        //Create the combo box, select item at index 4.
        //Indices start at 0, so 4 specifies the pig.
        cbEdgeDetectionKernel = new javax.swing.JComboBox(edgeDetectionKernelsList);
        cbEdgeDetectionKernel.setSelectedIndex(0);
        tlbMain.add(cbEdgeDetectionKernel);
        tlbMain.add(tlbSep6);
        ImageIcon icnSmooth = new ImageIcon(new ImageIcon(getClass().getResource("/tlbIcons/smoothing.png")).getImage().getScaledInstance(35, 35, Image.SCALE_SMOOTH));
        btnSmoothing.setIcon(icnSmooth); 
        btnSmoothing.setFocusable(false);
        btnSmoothing.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSmoothing.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSmoothing.setToolTipText("Smoothing");
        btnSmoothing.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnSmoothingMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });     
        tlbMain.add(btnSmoothing);         
        String[] smoothingKernelsList = {Reference.SMOOTH_BOX, Reference.SMOOTH_WEIGHTED_AVERAGE, Reference.SMOOTH_GAUSSIAN};
        //Create the combo box, select item at index 4.
        //Indices start at 0, so 4 specifies the pig.
        cbSmoothingKernel = new javax.swing.JComboBox(smoothingKernelsList);
        cbSmoothingKernel.setSelectedIndex(0);
        tlbMain.add(cbSmoothingKernel);  
        tlbMain.add(tlbSep7);
        btnHistEqualisation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tlbIcons/histEqual.png"))); // NOI18N        
        btnHistEqualisation.setFocusable(false);
        btnHistEqualisation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnHistEqualisation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnHistEqualisation.setToolTipText("Histogram Equalisation");
        btnHistEqualisation.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnHistEqualisationClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });     
        tlbMain.add(btnHistEqualisation); 
        tlbMain.add(tlbSep8);
        btnThresholding.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tlbIcons/thresholding.png"))); // NOI18N        
        btnThresholding.setFocusable(false);
        btnThresholding.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnThresholding.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnThresholding.setToolTipText("Thresholding"); 
        btnThresholding.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnThresholdingMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });      
        tlbMain.add(btnThresholding);   
        txtThresholding.setPreferredSize(new Dimension(50,44));
        txtThresholding.setMaximumSize(new Dimension(50,45));        
        txtThresholding.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tlbMain.add(txtThresholding);  
        tlbMain.add(tlbSep9);
        chkGrayScale.setSelected(true);
        chkGrayScale.setToolTipText("Convert output of covolution to Grayscale or RGB!");
        tlbMainLower.add(chkGrayScale);
        btnBitPlane.setText("Bit-Plane");
        btnBitPlane.setFocusable(false);
        btnBitPlane.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBitPlane.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBitPlane.setToolTipText("Bit-Plane"); 
        btnBitPlane.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnBitPlaneMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });      
        tlbMain.add(btnBitPlane);         
        String[] bitPlaneList = {"1", "2", "3", "4", "5", "6", "7", "8"};
        //Create the combo box, select item at index 4.
        //Indices start at 0, so 4 specifies the pig.
        cbBitPlane = new javax.swing.JComboBox(bitPlaneList);
        cbBitPlane.setSelectedIndex(0);
        tlbMain.add(cbBitPlane);  
        tlbMain.add(tlbSep10);
        btnBrightness.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tlbIcons/zoom_in.png"))); // NOI18N        
        btnBrightness.setFocusable(false);
        btnBrightness.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBrightness.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBrightness.setToolTipText("Rescaling (Adjust contrast)"); 
        btnBrightness.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnBrightnessMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });      
        tlbMain.add(btnBrightness);   
        txtBrightness.setPreferredSize(new Dimension(50,44));
        txtBrightness.setMaximumSize(new Dimension(50,45));        
        txtBrightness.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tlbMain.add(txtBrightness);                             
        tlbMain.add(tlbSep11);
        btnPixelShifting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tlbIcons/shifting.png"))); // NOI18N        
        btnPixelShifting.setFocusable(false);
        btnPixelShifting.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPixelShifting.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPixelShifting.setToolTipText("Pixel value shifting"); 
        btnPixelShifting.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnPixelShiftingMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });      
        tlbMain.add(btnPixelShifting);   
        txtPixelShifting.setPreferredSize(new Dimension(50,44));
        txtPixelShifting.setMaximumSize(new Dimension(50,45));  
        txtPixelShifting.setToolTipText("Shifting value for Pixel shifting"); 
        txtPixelShifting.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tlbMain.add(txtPixelShifting); 
        txtPixelScaleFactor.setPreferredSize(new Dimension(50,44));
        txtPixelScaleFactor.setMaximumSize(new Dimension(50,45));   
        txtPixelScaleFactor.setToolTipText("Scaling Factor for Pixel shifting"); 
        txtPixelScaleFactor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tlbMain.add(txtPixelScaleFactor);        
        tlbMain.add(tlbSep12);
        btnOrderStatistics.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tlbIcons/orderStatistics.png"))); // NOI18N        
        btnOrderStatistics.setFocusable(false);
        btnOrderStatistics.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOrderStatistics.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOrderStatistics.setToolTipText("Order Statistics"); 
        btnOrderStatistics.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    btnOrderStatisticsMouseClicked(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });      
        tlbMain.add(btnOrderStatistics);         
        String[] orderStatisticsList = {Reference.OS_MEDIAN, Reference.OS_MIN, Reference.OS_MAX, Reference.OS_MID};
        //Create the combo box, select item at index 4.
        //Indices start at 0, so 4 specifies the pig.
        cbOrderStatistics = new javax.swing.JComboBox(orderStatisticsList);
        cbOrderStatistics.setSelectedIndex(0);
        tlbMain.add(cbOrderStatistics);
        
        lblImage.setText("Image");
        mnuFile.setText("File");

        mnuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/folder.png"))); // NOI18N
        mnuOpen.setText("Open");
        mnuOpen.setToolTipText("");
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    mnuOpenActionPerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(ImageEditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        mnuFile.add(mnuOpen);
        mnuFile.add(mnuSep1);

        mnuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/save.png"))); // NOI18N
        mnuSave.setText("Save");
        mnuFile.add(mnuSave);

        mnuSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/saveas.png"))); // NOI18N
        mnuSaveAs.setText("Save As");
        mnuFile.add(mnuSaveAs);
        mnuFile.add(mnuSep2);

        mnuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/exit.png"))); // NOI18N
        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                System.exit(0);
            }
        });            
        mnuFile.add(mnuExit);
        mnuMain.add(mnuFile);
        mnuEdit.setText("Edit");
        mnuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/undo.png"))); // NOI18N
        mnuUndo.setText("Undo");      
        mnuUndo.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnUndoMousePerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(ImageEditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });              
        mnuEdit.add(mnuUndo);
        mnuRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/redo.png"))); // NOI18N
        mnuRedo.setText("Redo");
        mnuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnRedoMousePerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(ImageEditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });         
        mnuEdit.add(mnuRedo);
        mnuEdit.add(mnuSep3);

        mnuCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/cut.png"))); // NOI18N
        mnuCut.setText("Cut");
        mnuEdit.add(mnuCut);

        mnuCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/copy.png"))); // NOI18N
        mnuCopy.setText("Copy");
        mnuEdit.add(mnuCopy);

        mnuMain.add(mnuEdit);

        mnuFilters.setText("Filters");
        mnuRotateClockwise.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuRotateClockwise.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/rotate_clockwise.png"))); // NOI18N
        mnuRotateClockwise.setText("Rotate Clockwise");
        mnuRotateClockwise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnRotateClockwisePerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(ImageEditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });         
        mnuFilters.add(mnuRotateClockwise);
        mnuRotateAntiClockwise.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuRotateAntiClockwise.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/rotate_anticlockwise.png"))); // NOI18N
        mnuRotateAntiClockwise.setText("Rotate Anti-Clockwise");
        mnuRotateAntiClockwise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnRotateAntiClockwisePerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(ImageEditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });         
        mnuFilters.add(mnuRotateAntiClockwise);        
        mnuFilters.add(mnuSep4);
        mnuFilters.add(mnuSep5);
        mnuMain.add(mnuFilters);

        mnuHelp.setText("Help");

        mnuAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mnuIcons/info.png"))); // NOI18N
        mnuAbout.setText("About Image Editor");
        mnuHelp.add(mnuAbout);

        mnuMain.add(mnuHelp);

        setJMenuBar(mnuMain);
        imagePanel.setPreferredSize(new Dimension(600, 600));
        imagePanel.setMaximumSize(imagePanel.getPreferredSize()); 
        imagePanel.setMinimumSize(imagePanel.getPreferredSize());
        
      //  this.getContentPane().add(panelPane, BorderLayout.CENTER);
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(tlbMain, javax.swing.GroupLayout.PREFERRED_SIZE, 1400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(tlbMainLower, javax.swing.GroupLayout.PREFERRED_SIZE, 1400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))                                
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(tlbMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(tlbMainLower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                                .addContainerGap()
                        )
        );

        pack();
    }// </editor-fold>

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
        // TODO add your handling code here:
        OpenFile();
    }

    private void btnOpenMouseClicked(java.awt.event.MouseEvent evt) throws IOException {
        // TODO add your handling code here:
        OpenFile();
    }
    private void OpenFile() throws IOException{
        // TODO add your handling code here:
        FileFilter ft = new FileNameExtensionFilter("Image Files (.png, .jpg, .jpeg)", "png", "jpg", "jpeg");
        dbOpen.setMultiSelectionEnabled(true);
        dbOpen.addChoosableFileFilter(ft);
        int returnVal = dbOpen.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            File[] files = dbOpen.getSelectedFiles();
            imagePanel.removeAll();
            //add your elements
            revalidate();
            repaint();
            //this.setContentPane(new ImageDisplay(Arrays.asList(files)));          
            for(File filename : files)
            {
                this.bi = ImageIO.read(new File(filename.toString()));
            }
            stack.execute(new DisplayImage(pathPanel, this.bi));
            this.pack();    
        }        
    }
    
    private void btnAddFileMouseClicked(java.awt.event.MouseEvent evt) throws IOException {
        // TODO add your handling code here:
        FileFilter ft = new FileNameExtensionFilter("Image Files (.png, .jpg, .jpeg)", "png", "jpg", "jpeg");
        dbOpen.setMultiSelectionEnabled(true);
        dbOpen.addChoosableFileFilter(ft);
        int returnVal = dbOpen.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            File[] files = dbOpen.getSelectedFiles();
            //this.setContentPane(new ImageDisplay(Arrays.asList(files)));
            for(File filename : files)
            {
                stack.execute(new DisplayImage(pathPanel, ImageIO.read(new File(filename.toString()))));            
                this.pack();                  
            } 
        }
    }
    
    private void btnUndoMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        // TODO add your handling code here:
        undo(); 
    }
    
    private void btnUndoMousePerformed(java.awt.event.ActionEvent evt) throws IOException {
        // TODO add your handling code here:
        undo();
    }
    
    private void btnRedoMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        redo();
    }
    
    private void btnRedoMousePerformed(java.awt.event.ActionEvent evt) throws IOException {
        // TODO add your handling code here:
        redo();
    }    
        
    private void undo(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();        
        stack.undo();
    }
    
    private void redo(){
         // TODO add your handling code here:
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();        
        stack.redo();       
    }
    
    private void btnRotateClockwiseMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        // TODO add your handling code here:
        rotateClockwise();
    } 
    
    private void btnRotateClockwisePerformed(java.awt.event.ActionEvent evt) throws IOException {
        // TODO add your handling code here:
        rotateClockwise();
    }  
    
    private void rotateClockwise(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();
        double rotateVal;
        try {
           rotateVal = Double.parseDouble(txtRotateVal.getText());
        }
        catch (NumberFormatException e)
        {
           rotateVal = 0.0;
        }
        stack.execute(new RotatationFilter(pathPanel, this.bi, rotateVal, false, true));
        this.pack();        
    }
    
    private void btnRotateAntiClockwiseMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        // TODO add your handling code here:
        rotateAntiClockwise();
    }
    
    private void btnRotateAntiClockwisePerformed(java.awt.event.ActionEvent evt) throws IOException {
        // TODO add your handling code here:
        rotateAntiClockwise();
    }  
    
    private void rotateAntiClockwise(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();
        double rotateVal;
        try {
           rotateVal = Double.parseDouble(txtRotateVal.getText());
        }
        catch (NumberFormatException e)
        {
           rotateVal = 0.0;
        }
        stack.execute(new RotatationFilter(pathPanel, this.bi, rotateVal, false, false));
        this.pack();        
    } 
    
    private void btnEdgeDetectionMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        edgeDetection();
    }
   
    void edgeDetection(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();
        stack.execute(new EdgeDetectionFilter(pathPanel, null, (String) cbEdgeDetectionKernel.getSelectedItem(), chkGrayScale.isSelected()));
        this.pack();             
    }
    
    private void btnSmoothingMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        smoothing();
    }  
    
    void smoothing(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();
        stack.execute(new SmoothingFilter(pathPanel, null, (String) cbSmoothingKernel.getSelectedItem(), chkGrayScale.isSelected()));
        this.pack();          
    }
    
    private void btnHistEqualisationClicked(java.awt.event.MouseEvent evt)throws IOException {
        HistEqualisation();
    }
    
    void HistEqualisation(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();
        stack.execute(new HistogramEqualiserFilter(pathPanel, null));
        this.pack();          
    }  

    private void btnThresholdingMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        thresholidng();
    }
    
    private void thresholidng(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();
        int thresholdVal;
        try {
           thresholdVal = Integer.parseInt(txtThresholding.getText());
        }
        catch (NumberFormatException e)
        {
           thresholdVal = 0;
        }
        stack.execute(new ThresholdingFilter(pathPanel, null, thresholdVal));
        this.pack();        
    }
    
    private void btnBitPlaneMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        bitPlaneProcessing();
    }
    
    private void bitPlaneProcessing(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();
        int bitPlane;
        try {
           bitPlane = Integer.parseInt((String) cbBitPlane.getSelectedItem());
        }
        catch (NumberFormatException e)
        {
           bitPlane = 1;
        }
        stack.execute(new BitPlaneFilter(pathPanel, null, bitPlane));
        this.pack();        
    }
    
    private void btnBrightnessMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        brightnessProcessing();
    }
    
    private void brightnessProcessing(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();
        float brightnessVal;
        try {
           brightnessVal = Float.parseFloat((String) txtBrightness.getText());
        }
        catch (NumberFormatException e)
        {
           brightnessVal = 1;
        }
        stack.execute(new BrightnessFilter(pathPanel, null, brightnessVal));
        this.pack();        
    }
    
    private void btnPixelShiftingMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        pixelShiftingProcessing();
    }    
       
    private void pixelShiftingProcessing(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();
        int shiftValue;
        double scalingFactor;
        try {
           shiftValue = Integer.parseInt((String) txtPixelShifting.getText());
           scalingFactor = Double.parseDouble((String) txtPixelScaleFactor.getText());
        }
        catch (NumberFormatException e)
        {
           shiftValue = 0;
           scalingFactor = 1;
        }
        stack.execute(new PixelShiftingFilter(pathPanel, null, shiftValue, scalingFactor));
        this.pack();         
    }
    
    private void btnOrderStatisticsMouseClicked(java.awt.event.MouseEvent evt)throws IOException {
        orderStatisticsProcessing();
    }
    
    private void orderStatisticsProcessing(){
        imagePanel.removeAll();
        //add your elements
        revalidate();
        repaint();
        stack.execute(new OrderStatisticsFilter(pathPanel, null, (String)cbOrderStatistics.getSelectedItem()));
        this.pack();        
    }
    
    public void update(Observable target, Object arg) {
       imagePanel.repaint();
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnCut;
    private javax.swing.JButton btnRotateAnticlock;
    private javax.swing.JButton btnRotateClock; 
    private javax.swing.JTextField txtRotateVal;
    private javax.swing.JButton btnEdgeDetection; 
    private javax.swing.JComboBox cbEdgeDetectionKernel;
    private javax.swing.JButton btnSmoothing;
    private javax.swing.JComboBox cbSmoothingKernel;
    private javax.swing.JButton btnHistEqualisation;
    private javax.swing.JButton btnThresholding;
    private javax.swing.JTextField txtThresholding;
    private javax.swing.JCheckBox chkGrayScale;
    private javax.swing.JComboBox cbBitPlane;
    private javax.swing.JButton btnBitPlane;
    private javax.swing.JButton btnBrightness;
    private javax.swing.JTextField txtBrightness;
    private javax.swing.JButton btnPixelShifting;
    private javax.swing.JTextField txtPixelShifting;
    private javax.swing.JTextField txtPixelScaleFactor;
    private javax.swing.JButton btnOrderStatistics;
    private javax.swing.JComboBox cbOrderStatistics;    
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnAddFile;
    private javax.swing.JButton btnRedo;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveAs;
    private javax.swing.JButton btnUndo;
    private javax.swing.JFileChooser dbOpen;
    private javax.swing.JLabel lblImage;
    private javax.swing.JPopupMenu.Separator mnuSep1;
    private javax.swing.JPopupMenu.Separator mnuSep2;
    private javax.swing.JPopupMenu.Separator mnuSep3;
    private javax.swing.JPopupMenu.Separator mnuSep4;
    private javax.swing.JPopupMenu.Separator mnuSep5;
    private javax.swing.JToolBar.Separator tlbSep1;
    private javax.swing.JToolBar.Separator tlbSep2;
    private javax.swing.JToolBar.Separator tlbSep3;    
    private javax.swing.JToolBar.Separator tlbSep4;
    private javax.swing.JToolBar.Separator tlbSep5;
    private javax.swing.JToolBar.Separator tlbSep6;
    private javax.swing.JToolBar.Separator tlbSep7;
    private javax.swing.JToolBar.Separator tlbSep8;
    private javax.swing.JToolBar.Separator tlbSep9;
    private javax.swing.JToolBar.Separator tlbSep10;
    private javax.swing.JToolBar.Separator tlbSep11;
    private javax.swing.JToolBar.Separator tlbSep12;
    private javax.swing.JMenuItem mnuAbout;
    private javax.swing.JMenuItem mnuCopy;
    private javax.swing.JMenuItem mnuCut;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuFilters;
    private javax.swing.JMenuItem mnuRotateClockwise;
    private javax.swing.JMenuItem mnuRotateAntiClockwise;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenuBar mnuMain;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JMenuItem mnuRedo;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JMenuItem mnuSaveAs;
    private javax.swing.JMenuItem mnuUndo;
    private javax.swing.JToolBar tlbMain;
    private javax.swing.JToolBar tlbMainLower;
    //private javax.swing.JPanel panel;
    // End of variables declaration
}
